#Напишите программу, которой на вход подается последовательность чисел через пробел, а также запрашивается у пользователя любое число.
#В качестве задания повышенного уровня сложности можете выполнить проверку соответствия указанному в условии ввода данных.
#Далее программа работает по следующему алгоритму:
#1 Преобразование введённой последовательности в список
#2 Сортировка списка по возрастанию элементов в нем (для реализации сортировки определите функцию)
#3 Устанавливается номер позиции элемента, который меньше введенного пользователем числа, а следующий за ним больше или равен этому числу.
#4 При установке позиции элемента воспользуйтесь алгоритмом двоичного поиска, который был рассмотрен в этом модуле. Реализуйте его также отдельной функцией.
#Подсказка
#Помните, что у вас есть числа, которые могут не соответствовать заданному условию. В этом случае необходимо вывести соответствующее сообщение

##############################################################################################################################################################################

def _int(str):
    str = str.replace(" ", "")
    try:
        int(str)
        return True
    except ValueError:
        return False
def u_int(str):
    try:
        int(str)
        return True
    except ValueError:
        return False

##############################################################################################################################################################################

d = False
while d == False:
    num = input('\nВведите целые числа через пробел: ')    
 
    if " " not in num:
        print("\n!_В ВВОДЕ ОТСУТСТВУЮТ ПРОБЕЛЫ МЕЖДУ ЦИФРАМИ_!")
        d = False
    elif not _int(num):
        print("\n!_НЕТ ЦИФР ИЛИ ЦЕЛЫХ ЧИСЕЛ_!")
        d = False
    else:
        d = True
        num_list = list(map(int, num.split()))

b = False     
while b == False:
    u_num = input('\nВведите любое число: ')
 
    if not u_int(u_num):
        print("\n!_НЕТ ЦИФР ИЛИ ЦЕЛОГО ЧИСЛА_!")
        b = False
    else:
        b = True
        u_num = int(u_num)
        
##############################################################################################################################################################################

def sort(L):
    for i in range(len(L)):
        for j in range(len(L)-i-1):
            if L[j] > L[j+1]:
                L[j], L[j+1] = L[j+1], L[j]
    return L

sort_n_list = sort(num_list)
print(f"\nСписок чисел:\n{num_list}\n\nРЕЗУЛЬТАТ")

##############################################################################################################################################################################

def binary_search(array, element, left, right):
    try:
        if left > right:
            return False
        middle = (right + left) // 2
        if array[middle] == element:
            return middle
        elif element < array[middle]:
            return binary_search(array, element, left, middle - 1)
        else:
            return binary_search(array, element, middle + 1, right)
    except IndexError:
        return "\n!_ЧИСЛО ВНЕ ДИАПАЗОНА СПИСКА_!"

##############################################################################################################################################################################

if not binary_search(sort_n_list, u_num, 0, len(sort_n_list)):
    I = min(sort_n_list, key=lambda x: (abs(x - u_num), x))
    idx = sort_n_list.index(I)
    max_idx = idx + 1
    min_idx = idx - 1
    if I < u_num:
        print(f"!_В СПИСКЕ НЕТ ВВЕДЕННОГО ЭЛЕМЕНТА_!\nБлижайший меньший элемент: {I}, индекс {idx}\nБлижайший больший элемент: {sort_n_list[max_idx]}, индекс: {max_idx}\n")
    elif min_idx < 0:
       print(f"!_В СПИСКЕ НЕТ ВВЕДЕННОГО ЭЛЕМЕНТА_!\nНет меньшего элемента!\nБлижайший больший элемент: {I},  индекс: {sort_n_list.index(I)}\n") 
    elif I > u_num:
        print(f"!_В СПИСКЕ НЕТ ВВЕДЕННОГО ЭЛЕМЕНТА_!\nБлижайший меньший элемент: {sort_n_list[min_idx]}, индекс {min_idx}\nБлижайший больший элемент: {I}, индекс: {sort_n_list.index(I)}\n")
    elif sort_n_list.index(I) == 0:
        print(f'Индекс введенного элемента: {sort_n_list.index(I)}')   
else:
    print(f'Индекс введенного элемента: {binary_search(sort_n_list, u_num, 0, len(sort_n_list))}\n')

##############################################################################################################################################################################